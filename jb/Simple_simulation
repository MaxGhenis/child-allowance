# Preamble and read data
import microdf as mdf
import pandas as pd
import numpy as np
import us

# Read in census data and create a copy for manipulation
raw = pd.read_csv('https://github.com/MaxGhenis/datarepo/raw/master/pppub20.csv.gz')
df = raw.copy(deep=True)

# TO DO: Work out states:'GESTFIPS'

# Define child age identifiers
df['child_6'] = df.A_AGE < 6 
df['infant'] = df.A_AGE < 1
df['toddler'] = df.A_AGE.between(1,2)
df['preschool'] = df.A_AGE.between(3,5)
df['person'] = 1

# Aggregate to SPM level 
SPMU_COLS = ['SPM_ID', 'SPM_WEIGHT', 'SPM_TOTVAL', 'SPM_POVTHRESHOLD', 'SPM_CHILDCAREXPNS']
spmu = pd.DataFrame(df.groupby(SPMU_COLS)[
    ['child_6', 'infant', 'toddler', 'preschool', 'person']].sum()).reset_index()

# Calculate total cost of transfers
program_cost = spmu['SPM_CHILDCAREXPNS'].sum()

# Create copies of the dataset in which to simulate the policies
spmu_replace_cost = df.copy(deep=True)
spmu_flat_transfer = df.copy(deep=True)

## Simulation 1 - Family decisionmaking about childcare

# a) Gov replace childcare costs v flat transfer
spmu_replace_cost['new_inc'] = spmu_replace_cost.SPM_TOTVAL + spmu_replace_cost.SPM_CHILDCAREXPNS
spmu_replace_cost['poverty_flag'] = spmu_replace_cost.new_inc<spmu_replace_cost.SPM_POVTHRESHOLD

# b) Gov provides flat transfer of equal size
spmu_flat_transfer['flat_transfer'] = program_cost/spmu_flat_transfer.child_6
spmu_flat_transfer['new_inc'] = spmu_flat_transfer.SPM_TOTVAL + spmu_flat_transfer.flat_transfer
spmu_flat_transfer['poverty_flag'] = spmu_replace_cost.new_inc<spmu_replace_cost.SPM_POVTHRESHOLD

# Disaggregate to person level 

# Calculate person-level poverty rate by multiplying through by person-level weights
